@using System.Security.Claims
@inject DiaryGroupClient DiaryGroupClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="modal" tabindex="-1" style="display: @ModalDisplay;">
    <div class="modal-dialogue" role="document">
        <div class="modal-placement modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@HeaderName</h4>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()" />
            </div>
            <div class="modal-body">
                @if(!isDeleting) {
                    <p>Name of your group:</p>
                    <InputText class="full-width" @bind-Value="group!.Name"></InputText>
                } else{
                    <p>are you sure you wanna to delete group "@group!.Name" and it's diaries?</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancel</button>
                <button type="button" class="btn btn-@(isDeleting ? "danger" : "primary")" @onclick="SaveAsync">@(isDeleting ? "Delete" : "Save")</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [SupplyParameterFromForm]
    DiaryGroup? group { get; set; }
    public string ModalDisplay = "none;";
    public bool ShowBackdrop = false;
    private string? HeaderName;
    private bool isDeleting;

    protected async override Task OnInitializedAsync() {
        group = new() {
            Name = "",
            UserId = 1  // OnAfterRender is happenning later, so we have no loggedUser and can't get their Id.
                        // It's more effective to don't again calculate this, and just pass parameter from Navbar.
        };
        isDeleting = false;

        await base.OnInitializedAsync();
    }

    private async Task SaveAsync() {
        ArgumentNullException.ThrowIfNull(group);
        if(HeaderName == "Add thematic group") {
            await DiaryGroupClient.AddGroupAsync(group);
            NavigationManager.NavigateTo("/", true);
        } else if(isDeleting) {
            await DiaryGroupClient.DeleteGroupAsync(group.Id);
            NavigationManager.NavigateTo("/", true);
        } else {
            await DiaryGroupClient.UpdateGroupAsync(group);
            NavigationManager.Refresh(true);
        }
    }

    public void Open(int loggedUserId) {
        ModalDisplay = "block;";
        ShowBackdrop = true;
        HeaderName = "Add thematic group";
        group = new() {
            Name = "",
            UserId = loggedUserId
        };
        StateHasChanged();
    }
    public void OpenForEditing(DiaryGroup _group) {
        ModalDisplay = "block;";
        ShowBackdrop = true;
        group = _group;
        HeaderName = $"Editing group \"{group.Name}\"";
        StateHasChanged();
    }
    public void OpenForDeleting(DiaryGroup _group) {
        ModalDisplay = "block;";
        ShowBackdrop = true;
        group = _group;
        isDeleting = true;
        HeaderName = $"Deleting group \"{group.Name}\"";
        StateHasChanged();
    }
    private void Close() {
        ModalDisplay = "none;";
        ShowBackdrop = false;
        isDeleting = false;
        StateHasChanged();
    }

}
