@page "/Diary/{id:int}"
@using System.Security.Claims

@inject DiaryClient DiaryClient
@inject DiaryGroupClient DiaryGroupClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClient UserClient
@inject IStringLocalizer<Resources.MainResource> Localizator

<PageTitle>MyDiary</PageTitle>

<AuthorizeView Context="diaryContext">
    <Authorized>

        @if(diaries is null) {
            <p>@Localizator["LoadingDiaries"]</p>
        } else if(@isValidated) {
            <h1>@PageTitle</h1>
            <div>
                @foreach(var date in diaries.GroupBy(diary => diary.Date).Select(diary => diary.First().Date)) {
                    <ol>
                        <p>@date
                        <button class="btn btn-outline-primary" data-bs-toggle="collapse"
                            data-bs-target="#@date">@Localizator["CollapseInMainPage"]</button>
                        </p>
                    @foreach(var diary in diaries.Where(diary => diary.Date == date)) {
                        <li class="ms-2 collapse nonumeration" id="@date">
                            <ol>
                                <p>@diary.Time
                                <button class="btn btn-outline-secondary" data-bs-toggle="collapse"
                                    data-bs-target="#@diary.Id">@Localizator["CollapseInMainPage"]</button>
                                </p>
                                <li class="ms-4 nonumeration collapse" id="@diary.Id">
                                    <p class="new-line-work">@diary.Text</p>
                                </li>
                            </ol>
                        </li>
                    }
                    </ol>
                }
            </div>
            <EditForm Model="diary" OnValidSubmit="AddDiaryAsync" FormName="SendDiary" class="footer">
                <div class="d-flex mb-2 me-2 ms-2" style="height: 60px;">
                    <InputTextArea @bind-value="diary!.Text" class="form-control bg-secondary no-resize" style="--bs-bg-opacity: .33;" />
                    <button class="btn btn-secondary ms-2" type="submit">@Localizator["MainPageButtonText"]</button>
                </div>
            </EditForm>
        } else {
            <PageTitle>Diary - @Localizator["NotValidatedTitle"]</PageTitle>
            <h1>@Localizator["NotValidatedTitle"]</h1>
            <p>@Localizator["NotValidatedText"]</p>
        }
    </Authorized>
    <NotAuthorized>
        <PageTitle>Diary - @Localizator["UnathorizedTitle"]</PageTitle>
        <h1>@Localizator["UnathorizedTitle"]</h1>
        <p>@Localizator["UnathorizedText"]</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int? id { get; set; }

    private List<Diary>? diaries;
    private Diary? diary;
    private DiaryGroup? group;
    public string? PageTitle;
    private bool isValidated;

    protected override async Task OnInitializedAsync() {
        if(id is null)
            throw new Exception("id in Diaries page is null.");
        diary ??= new() {
            Text = "",
            GroupId = id!.Value
        };
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync() {
        if(id is null)
            throw new Exception("id in Diaries page is null.");
        try {
            group = await DiaryGroupClient.GetGroupAsync(id.Value);
            PageTitle = group.Name;
            diary = new() {
                Text = "",
                GroupId = id!.Value
            };
            diaries = await DiaryClient.GetDiariesOfGroupAsync(group.Id);
        } catch (Exception Exception) {
            if(Exception.Message == "Response status code does not indicate success: 404 (Not Found).") {
                RedirectTo404();
            }
            Console.WriteLine(Exception);
        }
        await base.OnParametersSetAsync();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender) {

            var loggedUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            if(loggedUser.Identity != null && loggedUser.Identity.IsAuthenticated) {
                int loggedUserId = Convert.ToInt32(loggedUser.FindFirstValue("userId"));
                User user = await UserClient.GetUserAsync(loggedUserId);
                isValidated = user.IsValidated;
            } else {
                NavigationManager.NavigateTo("/Users/Login");
            }

            StateHasChanged();
        }
    }

    private void RedirectTo404() {
        NavigationManager.NavigateTo("NotFoundResource");
    }
    async Task AddDiaryAsync() {
        await DiaryClient.AddDiaryAsync(diary!);
        StateHasChanged();
        NavigationManager.Refresh(true);
    }
}

