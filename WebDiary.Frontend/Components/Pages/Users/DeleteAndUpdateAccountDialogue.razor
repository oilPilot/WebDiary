@using System.ComponentModel.DataAnnotations
@using WebDiary.Frontend.Models.Auth
@inject UserClient UserClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IStringLocalizer<Resources.UsersResource> Localizator

<div class="modal" tabindex="-1" style="display: @ModalDisplay;">
    <div class="modal-dialogue" role="document">
        <div class="modal-placement modal-content" style="top: 10%;">
            <div class="modal-header">
                <h4 class="modal-title">@HeaderName</h4>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()" />
            </div>
            <div class="modal-body">
                @if(!isDeleting) {
                    <div>
                        <div class="mt-3">
                            <label>
                                @Localizator["AskUsername"]
                                <InputText @bind-value="newUser!.UserName" />
                            </label>
                        </div>
                        <div class="mt-3">
                            <label>
                                @Localizator["AskSelfdescription"]
                                <InputTextArea @bind-value="newUser.Description" class="no-resize" />
                            </label>
                        </div>
                        <div class="mt-3">
                            <label>
                                @Localizator["AskNewEmail"]
                                <InputText @bind-value="newUser.Email" />
                            </label>
                        </div>
                        <div class="mt-3">
                            <label>
                                @Localizator["AskOldPassword"]
                                <InputText type="password" @bind-value="newUser.Password" />
                            </label>
                        </div>
                        <div class="mt-3">
                            <label>
                                @Localizator["AskNewPassword"]
                                <InputText type="password" @bind-value="newPassword" />
                            </label>
                        </div>
                        <div>
                            <label>
                                <p class="fs-5 fw-semibold text-danger">@ErrorMessage</p>
                                @if(passwordForgot) {
                                    <p>@Localizator["PswdIncorrectDoYouForgot"]
                                        @Localizator["Restore1"]<a href="/Users/RestorePassword" class="link-info">@Localizator["AddressForSomething"]</a></p>
                                }
                            </label>
                        </div>
                    </div>
                } else {
                    <p class="fs-5 fw-semibold text-danger">@Localizator["DeleteAccSure"]</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">
                    @Localizator["CancelButtonText"]</button>
                <button type="button" class="btn btn-@(isDeleting ? "danger" : "primary")" data-dismiss="modal" 
                    @onclick="SaveAsync">@(isDeleting ? Localizator["DeleteButtonText"] : Localizator["SaveButtonText"])</button>
            </div>
        </div>
    </div>
</div>

@if(showBackdrop) {
    <div class="modal-backdrop fade show" />
}


@code {
    private string? HeaderName;
    public string ModalDisplay = "none;";
    private bool isDeleting = false;
    private bool showBackdrop = false;
    private bool passwordForgot = false;
    private string ErrorMessage = "";
    private User? user;
    private User? newUser;
    private int _loggedUserId;
    private string? newPassword;

    protected override async Task OnInitializedAsync() {
        HeaderName = "Delete account?";
        user = new User() {
            UserName = "",
            Password = ""
        };
        newUser = user;
        await base.OnInitializedAsync();
    }

    public async Task OpenForUpdatingAsync(int loggedUserId) {
        ModalDisplay = "block";
        showBackdrop = true;
        isDeleting = false;
        user = await UserClient.GetUserByIdAsync(loggedUserId);
        newUser = user;
        newUser.Password = "";
        HeaderName = "Change account";
        StateHasChanged();
    }
    public void OpenForDelete(int loggedUserId) {
        ModalDisplay = "block";
        showBackdrop = true;
        isDeleting = true;
        _loggedUserId = loggedUserId;
        HeaderName = "Delete account";
        StateHasChanged();
    }

    public void Close() {
        ModalDisplay = "none";
        showBackdrop = false;
        StateHasChanged();
    }
    
    private async Task ReLogin() {
        var response = await HttpClient.PostAsJsonAsync("/auth/jwttoken/login", new { Username = newUser!.UserName, Password = newUser.Password });
        if(response.IsSuccessStatusCode) {
            System.Text.Json.JsonElement result = await response.Content.ReadFromJsonAsync<dynamic>();
            var token = result.GetProperty("token").GetString();
            var refreshToken = result.GetProperty("refreshToken").GetString();
            if(token != null && refreshToken != null)
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LoginUserAsync(token!, refreshToken!);
        } else {
            var msg = await response.Content.ReadAsStringAsync();
            ErrorMessage = msg;
        }
    }

    private async Task SaveAsync() {
        if(isDeleting) {
            await UserClient.DeleteUserAsync(_loggedUserId);
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogoutUserAsync();
            NavigationManager.NavigateTo("/", true);
        } else {
            ErrorMessage = "";
            var response = (await HttpClient.GetAsync($"/auth/password/isequal/{newUser!.Password}/{user!.Id}?culture={CultureInfo.CurrentCulture}"));
            if( response.IsSuccessStatusCode ) {
                if(newUser.UserName.Length < 3) {
                    ErrorMessage += Localizator["UpdateAccDialogueError1"];
                    return;
                }
                if(!String.IsNullOrEmpty(newUser.Email)) {
                    var index = newUser.Email.IndexOf('@');
                    if(index == 0 || index == newUser.Email.Length-1 || index != newUser.Email.LastIndexOf('@')) {
                        ErrorMessage += Localizator["UpdateAccDialogueError2"];
                        return;
                    }
                }
                if(!String.IsNullOrEmpty(newPassword) && newPassword.Length >= 8) {
                    newUser.Password = newPassword;
                } else if(!String.IsNullOrEmpty(newPassword) && newPassword.Length < 8) {
                    ErrorMessage += Localizator["UpdateAccDialogueError3"];
                    return;
                }
                await UserClient.UpdateUserAsync(newUser);
                await ReLogin();
                StateHasChanged();
                Close();
            } else {
                var msg = await response.Content.ReadAsStringAsync();
                ErrorMessage += msg;
                passwordForgot = true;
            }
        }
    }

}