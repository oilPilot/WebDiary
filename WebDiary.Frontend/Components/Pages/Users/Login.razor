@page "/Login"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.IdentityModel.Tokens
@using Blazored.SessionStorage;
@using WebDiary.Frontend.Models.Auth
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject UserClient UserClient
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient

<PageTitle>Diary - Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="TryLogin">
    <ValidationSummary />
    <div class="d-flex">
        <InputText @bind-value="user!.UserName" />
        <ValidationMessage For="() => user.UserName" />
        <InputText @bind-value="user.Password" />
        <ValidationMessage For="() => user.Password" />
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@code {
    public User? user;
    
    public async Task TryLogin() {
        var response = await HttpClient.PostAsJsonAsync("http://localhost:5281/auth/jwttoken/login", new { Username = user!.UserName, Password = user.Password });
        if(response.IsSuccessStatusCode) {
            System.Text.Json.JsonElement result = await response.Content.ReadFromJsonAsync<dynamic>();
            var token = result.GetProperty("token").GetString();
            await ((CustomAuthenticationStateProvider)AuthStateProvider).LoginUserAsync(token!);
            NavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        user = new User() {
            UserName = "",
            Password = ""
        };
    }

}
