@page "/Users/Login"
@using WebDiary.Frontend.Models.Auth

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient

<PageTitle>Diary - Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="TryLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mt-3">
        <div class="mt-3">
            <label>
                Username:
                <InputText @bind-value="user!.UserName" DisplayName="Tst" />
                <ValidationMessage For="() => user.UserName" />
            </label>
        </div>
        <div class="mt-3">
            <label>
                Password:
                <InputText @bind-value="user.Password" />
                <ValidationMessage For="() => user.Password" />
            </label>
        </div>
        <div class="mt-3">
            <label>
                <button type="submit" class="btn btn-primary">Login</button>
            </label>
        </div>
        <div>
            <label>
                <p>@ErrorMessage</p>
            </label>
        </div>
    </div>
</EditForm>
<p>Have no account? You can signin <a href="/Users/Signin">here</a></p>
<p>Forgot your password? If you have entered Email you can restore it <a href="/Users/RestorePassword">here</a></p>

@code {
    [SupplyParameterFromForm]
    public User? user { get; set; }
    private string ErrorMessage = "";
    
    public async Task TryLogin() {
        ErrorMessage = "";
        var response = await HttpClient.PostAsJsonAsync("/auth/jwttoken/login", new { Username = user!.UserName, Password = user.Password });
        if(response.IsSuccessStatusCode) {
            System.Text.Json.JsonElement result = await response.Content.ReadFromJsonAsync<dynamic>();
            var token = result.GetProperty("token").GetString();
            await ((CustomAuthenticationStateProvider)AuthStateProvider).LoginUserAsync(token!);
            NavigationManager.NavigateTo("/", true);
        }
        else {
            ErrorMessage = "Something went wrong. Check if username and password is correct.";
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        user = new User() {
            UserName = "",
            Password = ""
        };
    }

}
