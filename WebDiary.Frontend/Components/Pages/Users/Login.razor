@page "/Users/Login"
@using WebDiary.Frontend.Models.Auth

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient

<PageTitle>MyDiary</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="TryLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mt-3">
        <div class="mt-3">
            Username:
            <InputText class="form-full-width" @bind-value="user!.UserName" DisplayName="Tst" />
            <ValidationMessage For="() => user.UserName" />
        </div>
        <div class="mt-3">
            Password:
            <InputText class="form-full-width" @bind-value="user.Password" />
            <ValidationMessage For="() => user.Password" />
        </div>
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
        <div class="mt-3 text-nowrap">
            <p class="fs-5 fw-semibold text-danger">@ErrorMessage</p>
        </div>
    </div>
</EditForm>
<p>Have no account? You can signin <a href="/Users/Signin" class="link-info">here</a></p>
<p>Forgot your password? If you have entered Email you can restore it <a href="/Users/RestorePassword" class="link-info">here</a></p>

@code {
    [SupplyParameterFromForm]
    public User? user { get; set; }
    private string ErrorMessage = "";
    
    public async Task TryLogin() {
        ErrorMessage = "";
        var response = await HttpClient.PostAsJsonAsync("/auth/jwttoken/login", new { Username = user!.UserName, Password = user.Password });
        if(response.IsSuccessStatusCode) {
            System.Text.Json.JsonElement result = await response.Content.ReadFromJsonAsync<dynamic>();
            var token = result.GetProperty("token").GetString();
            await ((CustomAuthenticationStateProvider)AuthStateProvider).LoginUserAsync(token!);
            NavigationManager.NavigateTo("/", true);
        }
        else {
            ErrorMessage = "Something went wrong. Check if username and password is correct.";
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        user = new User() {
            UserName = "",
            Password = ""
        };
    }

}
