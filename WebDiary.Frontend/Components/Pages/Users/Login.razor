@page "/Users/Login"
@using WebDiary.Frontend.Models.Auth

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject IStringLocalizer<Resources.UsersResource> Localizator

<PageTitle>MyDiary</PageTitle>

<h3>@Localizator["Login"]</h3>

<EditForm Model="user" OnValidSubmit="TryLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mt-3">
        <div class="mt-3">
            @Localizator["AskUsername"]
            <InputText type="text" class="form-full-width" @bind-value="user!.UserName" DisplayName="Tst" />
            <ValidationMessage For="() => user.UserName" />
        </div>
        <div class="mt-3">
            @Localizator["AskPassword"]
            <InputText type="password" class="form-full-width" @bind-value="user.Password" />
            <ValidationMessage For="() => user.Password" />
        </div>
        <div class="mt-3">
            <button type="submit" class="btn btn-primary @ButtonDisabled">@Localizator["Login"]</button>
        </div>
        <div class="mt-3 text-nowrap">
            <p class="fs-5 fw-semibold text-danger">@ErrorMessage</p>
        </div>
    </div>
</EditForm>
<p>@Localizator["SignInTextRedirect"]<a href="/Users/Signin" class="link-info">@Localizator["AddressForSomething"]</a></p>
<p>@Localizator["ForgotTextRedirect"]<a href="/Users/RestorePassword"
    class="link-info">@Localizator["AddressForSomething"]</a></p>

@code {
    [SupplyParameterFromForm]
    public User? user { get; set; }
    [SupplyParameterFromQuery]
    private string ErrorMessage { get; set; } = "";
    private string ButtonDisabled = "";
    
    public async Task TryLogin() {
        ButtonDisabled = "disabled";
        ErrorMessage = "";
        var response = await HttpClient.PostAsJsonAsync($"/auth/jwttoken/login?culture={CultureInfo.CurrentCulture}", new { Username = user!.UserName, Password = user.Password });
        if(response.IsSuccessStatusCode) {
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var token = result!.token;
            var refreshToken = result.refreshToken;
            if(token != null && refreshToken != null)
                await ((CustomAuthenticationStateProvider)AuthStateProvider).LoginUserAsync(token, refreshToken);
            NavigationManager.NavigateTo("/", true);
        } else {
            var msg = await response.Content.ReadAsStringAsync();
            ErrorMessage = msg;
//            ErrorMessage = Localizator["LoginError"];
        }
    }
    
    private class LoginResponse {
        public string token { get; set; } = "";
        public string refreshToken { get; set; } = "";
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        user = new User() {
            UserName = "",
            Password = ""
        };
    }

}
