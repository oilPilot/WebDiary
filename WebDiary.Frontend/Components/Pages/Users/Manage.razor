@page "/Users"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using WebDiary.Frontend.Models.Auth
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<h3>Manage account</h3>

<AuthorizeView>
    <Authorized>
        <PageTitle>Diary - @context.User.Identity!.Name</PageTitle>
        <p>Name:        @context.User.Identity!.Name</p>
        <p>Role:        @context.User.FindFirstValue(ClaimTypes.Role)</p>
        <p>Description: @context.User.FindFirstValue(ClaimTypes.UserData)</p>
        <p>Email:       @context.User.FindFirstValue(ClaimTypes.Email)</p>
        <button type="button" class="btn btn-outline-secondary" @onclick="Login">Login into another account</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="() => modalAccount!.OpenForUpdatingAsync(loggedUserId)">Modify account</button>
        <button type="button" class="btn btn-outline-danger" @onclick="Logout">Logout</button>
        <button type="button" class="btn btn-outline-danger" @onclick="() => modalAccount!.OpenForDelete(loggedUserId)">Delete account</button>
        <WebDiary.Frontend.Components.Pages.Users.DeleteAndUpdateAccountDialogue @ref="modalAccount" />
        <AuthorizeView Roles="Admin" Context="AdminContext">
            <Authorized>
                <p>You are Admin!</p>
            </Authorized>
        </AuthorizeView>
    </Authorized>
</AuthorizeView>

@code {
    private int loggedUserId;
    private WebDiary.Frontend.Components.Pages.Users.DeleteAndUpdateAccountDialogue? modalAccount;
    
    private async Task Logout() {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogoutUserAsync();
        NavigationManager.NavigateTo("/", true);
    }
    private void Login() {
        NavigationManager.NavigateTo("/Users/Login", true);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender) {

            var loggedUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            if(loggedUser.Identity != null && loggedUser.Identity.IsAuthenticated) {
                loggedUserId = Convert.ToInt32(loggedUser.FindFirstValue("userId"));
            }

            StateHasChanged();
        }
    }
}
