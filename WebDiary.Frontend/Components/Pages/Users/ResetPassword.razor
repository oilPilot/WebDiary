@page "/Users/ResetPassword"
@using System.Collections.Specialized
@using System.ComponentModel.DataAnnotations

@inject UserClient UserClient
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>MyDiary</PageTitle>

<h3>Reseting password</h3>

<EditForm Model="changePassword" OnValidSubmit="TryChangePassword" FormName="ResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <div class="mt-3">
            New password:
            <InputText type="password" class="form-full-width" @bind-value="changePassword.password" />
            <ValidationMessage For="() => changePassword.password" />
        </div>
        <div class="mt-3">
            Verify password:
            <InputText type="password" class="form-full-width" @bind-value="changePassword.verifyPassword" />
            <ValidationMessage For="() => changePassword.verifyPassword" />
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Change password</button>
        </div>
        <div class="mt-3">
            <p class="fs-5 fw-semibold text-danger">@ErrorMessage</p>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private ChangePassword changePassword { get; set; } = new() {password = "", verifyPassword = ""};
    string ErrorMessage { get; set; } = "";
    NameValueCollection? query { get; set; }

    public async Task TryChangePassword() {
        if(changePassword.password == changePassword.verifyPassword) {
            var response = await HttpClient.PostAsJsonAsync("/auth/ResetPassword", new
                { Token = query!["token"], UserId = Convert.ToInt32(query["userId"]), newPassword = changePassword.password });
            if(response.IsSuccessStatusCode && response.Content.Headers.ContentLength == 4 ? true : false ) {
                NavigationManager.NavigateTo("/Users/Login");
            } else {
                ErrorMessage = "Something went wrong with verifying. Are your reset password time isn't expired?";
            }
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        query = System.Web.HttpUtility.ParseQueryString(new UriBuilder(NavigationManager.Uri).Query);
    }

    private class ChangePassword {
    [MinLength(8)]
        public required string password { get; set; }
    [MinLength(8)]
    [Compare(nameof(password), ErrorMessage = "Passwords aren't equal.")]
        public required string verifyPassword { get; set; }
    }

}
