@page "/Users/RestorePassword"
@using System.Net.Mail
@using System.Security.Cryptography
@attribute [StreamRendering]

@inject UserClient UserClient
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@if(String.IsNullOrEmpty(Message)) {
    <PageTitle>Diary - Restore password</PageTitle>

    <h3>Restoring password</h3>
    <div class="mt-3">
        <div class="mt-3">
            <label>
                Username or Email:
                <input type="text" @bind-value="userData" />
            </label>
        </div>
        <div class="mt-3">
            <label>
                <button class="btn btn-primary" @onclick="TrySendEmail">Send Email</button>
            </label>
        </div>
    </div>
} else {
    <PageTitle>Diary - Email sended</PageTitle>
    <h3>@Message</h3>
}

<div class="mt-3">
    <p>@ErrorMessage</p>
</div>


@code {
    public string? userData { get; set; }
    private User? user { get; set; }
    private string ErrorMessage = "";
    private string Message = "";

    public async Task TrySendEmail() {
        ErrorMessage = "";
        List<User> users = await UserClient.GetUsersAsync();
        var index = userData!.IndexOf('@');
        if(index > 0 && index != userData.Length-1 && index == userData.LastIndexOf('@')) {
            User[] usersArray = users.Where(user => user.Email == userData).ToArray();
            user = usersArray != null ? usersArray[0] : null;
        } else {
            User[] usersArray = users.Where(user => user.UserName == userData).ToArray();
            user = usersArray != null ? usersArray[0] : null;
        }
        if(user == null) {
            ErrorMessage = "User wasn't found. Check if username\\email is correct.";
        } else if (String.IsNullOrEmpty(user.Email)) {
            ErrorMessage = "User had no email to send restoration message to.";
        } else {
            // Creating callbackUrl for using in Message
            var token = RandomNumberGenerator.GetBytes(32);
            var Base64Token = Convert.ToBase64String(token).Replace('+', '-').Replace('/', '_');
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.BaseUri + "Users/ResetPassword",
                new Dictionary<string, object?>() { {"token", Base64Token}, {"userId", user.Id} });

            // Adding changes to DB
            user.ResetPasswordToken = token;
            user.ResetPasswordDateEnd = DateTime.Now.AddMinutes(30);
            await UserClient.UpdateUserAsync(user);

            // using backend to send email
            _ = HttpClient.PostAsJsonAsync("/auth/sendEmail", new { email = user.Email, CallbackUrl = callbackUrl, Username = user.UserName })
                .ContinueWith(exception => {
                    Console.WriteLine(exception);
                    ErrorMessage = $"Something went wrong on backend. Contact with developer."; }
                , TaskContinuationOptions.OnlyOnFaulted);
            // Now show that everything is fine.
            Message = "Message has been started sending. Check your email, maybe message will come after few seconds or minutes.";
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        userData = "";
    }

}
