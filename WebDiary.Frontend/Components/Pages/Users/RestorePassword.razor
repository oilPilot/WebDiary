@page "/Users/RestorePassword"
@using System.Net.Mail
@using System.Security.Cryptography
@attribute [StreamRendering]

@inject UserClient UserClient
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IStringLocalizer<Resources.UsersResource> Localizator

<PageTitle>MyDiary</PageTitle>
@if(String.IsNullOrEmpty(Message)) {

    <h3>Restoring password</h3>
    <div class="mt-3">
        <div class="mt-3">
            @Localizator["Email"]
            <input class="form-full-width" type="text" @bind-value="email" />
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="TrySendEmail">Send email</button>
        </div>
    </div>
} else {
    <h3>@Message</h3>
}

<div class="mt-3">
    <p class="fs-5 fw-semibold text-danger">@ErrorMessage</p>
</div>


@code {
    public string? email { get; set; }
    private User? user { get; set; }
    private string ErrorMessage = "";
    private string Message = "";

    public async Task TrySendEmail() {
        ErrorMessage = "";
        user = await UserClient.GetUserByEmailAsync(email!);
        if(user == null) {
            ErrorMessage = Localizator["RestorePasswordError1"];
            return;
        }
        // Creating callbackUrl for using in Message
        var token = RandomNumberGenerator.GetBytes(32);
        var Base64Token = Convert.ToBase64String(token).Replace('+', '-').Replace('/', '_');
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.BaseUri + "Users/ResetPassword",
            new Dictionary<string, object?>() { {"token", Base64Token}, {"userId", user.Id} });

        // Adding changes to DB
        user.ActionToken = token;
        user.ActionDateEnd = DateTime.Now.AddMinutes(30);
        await UserClient.UpdateUserAsync(user);

        // using backend to send email
        _ = HttpClient.PostAsJsonAsync("/auth/sendEmail", new { userId = user.Id, CallbackUrl = callbackUrl })
            .ContinueWith(exception => {
                Console.WriteLine(exception);
                ErrorMessage = Localizator["WrongOnBackend"]; }
            , TaskContinuationOptions.OnlyOnFaulted);
        // Now show that everything is fine.
        Message = Localizator["RestorePasswordSuccessSending"];
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        email = "";
    }

}
