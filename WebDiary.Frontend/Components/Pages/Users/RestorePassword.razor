@page "/Users/RestorePassword"
@using System.Net.Mail
@using System.Security.Cryptography

@inject UserClient UserClient
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>Diary - Restore password</PageTitle>

<h3>Restoring password</h3>
<div class="mt-3">
    <div class="mt-3">
        <label>
            Username or Email:
            <input type="text" @bind-value="userData" />
        </label>
    </div>
    <div class="mt-3">
        <label>
            <button class="btn btn-primary" @onclick="TrySendEmail">Send Email</button>
        </label>
    </div>
    <div class="mt-3">
        <label>
            <p>@ErrorMessage</p>
        </label>
    </div>
</div>


@code {
    public string? userData { get; set; }
    private User? user { get; set; }
    private string ErrorMessage = "";
    
    public async Task TrySendEmail() {
        ErrorMessage = "";
        List<User> users = await UserClient.GetUsersAsync();
        var index = userData!.IndexOf('@');
        if(index > 0 && index != userData.Length-1 && index == userData.LastIndexOf('@')) {
            User[] usersArray = users.Where(user => user.Email == userData).ToArray();
            user = usersArray != null ? usersArray[0] : null;
        } else {
            User[] usersArray = users.Where(user => user.UserName == userData).ToArray();
            user = usersArray != null ? usersArray[0] : null;
        }
        if(user == null) {
            ErrorMessage = "User wasn't found. Check if username\\email is correct.";
        } else if (String.IsNullOrEmpty(user.Email)) {
            ErrorMessage = "User had no email to send restoration message to.";
        } else {
            // Creating callbackUrl for using in Message
            var token = RandomNumberGenerator.GetBytes(32);
            var Base64Token = Convert.ToBase64String(token).Replace('+', '-').Replace('/', '_');
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.BaseUri + "Users/ResetPassword",
                new Dictionary<string, object?>() { {"token", Base64Token}, {"userId", user.Id} });
            
            // Adding changes to DB
            user.ResetPasswordToken = token;
            user.ResetPasswordDateEnd = DateTime.Now.AddMinutes(30);
            await UserClient.UpdateUserAsync(user);

            // using backend to send email
            var response = await HttpClient.PostAsJsonAsync("/auth/sendEmail", new { email = user.Email, CallbackUrl = callbackUrl, Username = user.UserName });
            if(response.IsSuccessStatusCode) {
                // Navigate to show that everything is fine
                NavigationManager.NavigateTo("/Users/EmailSended");
            } else {
                ErrorMessage = "Something went wrong when sending email. Try later, or possibly contact developer.";
            }
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        userData = "";
    }

}
