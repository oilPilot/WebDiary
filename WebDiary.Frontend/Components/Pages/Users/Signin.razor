@page "/Users/Signin"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject UserClient UserClient
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Diary - Signin</PageTitle>

<h3>Signin</h3>

<EditForm Model="user" OnValidSubmit="SignIn" FormName="SigninForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mt-3">
        <div class="mt-3">
            <label>
                Username:
                <InputText @bind-value="user!.UserName" DisplayName="Tst" />
                <ValidationMessage For="() => user.UserName" />
            </label>
        </div>
        <div class="mt-3">
            <label>
                New password:
                <InputText @bind-value="user.Password" />
                <ValidationMessage For="() => user.Password" />
            </label>
        </div>
        <div class="mt-3">
            <label>
                <button type="submit" class="btn btn-primary">Signin</button>
            </label>
        </div>
        <div>
            <label>
                <p>@ErrorMessage</p>
            </label>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public User? user { get; set; }
    private string ErrorMessage = "";
    
    public async Task SignIn() {
        ErrorMessage = "";
        if( (await UserClient.GetUsersAsync()).Any(userDb => userDb.UserName == user!.UserName)) {
            ErrorMessage = "Your username is already used by another user. Please try another username.";
            return;
        }
        await UserClient.AddUserAsync(user!);
        NavigationManager.NavigateTo("/Users/Login");
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        user = new User() {
            UserName = "",
            Password = ""
        };
    }

}
